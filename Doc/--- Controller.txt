---  AdminController.php : 
<?php
require_once 'app/models/UserModel.php';
require_once 'app/models/ArticleModel.php';
require_once 'app/models/ClientModel.php';
require_once 'app/models/FacturesModel.php';
require_once 'app/models/HistoriqueAchatsModel.php';
require_once 'app/models/ArticleBoutiqueModel.php';
require_once 'app/models/NotesModel.php';
require_once 'app/models/AchatModel.php';
require_once 'app/models/BoutiqueModel.php';
require_once 'app/models/MarketingModel.php';
require_once 'app/views/admin_view.php';

class AdminController extends BaseController
{
    private $userModel;
    private $articleModel;
    private $clientModel;
    private $facturesModel;
    private $historiqueAchatsModel;
    private $articleBoutiqueModel;
    private $notesModel;
    private $achatModel;
    private $marketingModel;
    private $boutiqueModel;

    private $adminView;

    public function __construct()
    {
        $this->userModel = new UserModel();
        $this->articleModel = new ArticleModel();
        $this->clientModel = new ClientModel();
        $this->facturesModel = new FacturesModel();
        $this->historiqueAchatsModel = new HistoriqueAchatsModel();
        $this->articleBoutiqueModel = new ArticleBoutiqueModel();
        $this->notesModel = new NotesModel();
        $this->achatModel = new AchatModel();
        $this->boutiqueModel = new BoutiqueModel();
        $this->marketingModel = new MarketingModel();

        $this->adminView = new AdminView();
    }
    /**
     * Fonctions Admin (Dashboard)
     */
    public function isUserAdmin()
    {
        return isset($_SESSION['role']) && $_SESSION['role'] === 'Admin';
    }

    public function dashboard()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->adminView->renderAdminDashboard();
    }

    /**
     * Dashboard USER (User)
     */

    public function dashboardUser()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->showDashboardUser();
    }

    private function showDashboardUser()
    {
        try {
            $users = $this->userModel->getUsers();
            $this->adminView->AdminDashboardUser($users);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    /**
     * Dashboard Article (Article)
     */

    public function dashboardArticle()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->showDashboardArticle();
    }

    private function showDashboardArticle()
    {
        try {
            $articles = $this->articleModel->lire();
            $this->adminView->adminDashboardArticle($articles);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    /**
     * Dashboard Client (Client)
     */

    public function dashboardClient()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->showDashboardClient();
    }

    private function showDashboardClient()
    {
        try {
            $clients = $this->clientModel->lire();
            $this->adminView->adminDashboardClient($clients);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    /**
     * Dashboard Marketing (Marketing)
     */

    public function dashboardMarketing()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->showDashboardMarketing();
    }

    private function showDashboardMarketing()
    {
        try {
            $marketings = $this->marketingModel->lire();
            $this->adminView->adminDashboardMarketing($marketings);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }


    /**
     * Fonctions Edit (User)
     */
    public function editUser($id)
    {
        $user = $this->userModel->getUserById($id);
        if ($user) {
            $this->adminView->renderEditUserForm($user);
        } else {
            // Gérer l'erreur
            echo "Erreur : L'utilisateur n'existe pas.";
        }
    }

    /**
     * Fonctions Update (User)
     */
    public function updateUser($id, $data)
    {
        $result = $this->userModel->updateById($id, $data);
        if ($result) {
            header("Location: index.php?action=dashboardUser");
            exit;
        } else {
            // Gérer l'erreur
            echo "Erreur : Échec de la mise à jour.";
        }
    }

    /**
     * Fonctions Delete (User)
     */
    public function deleteUser()
    {
        $id = $_POST['id'];
        $this->userModel->deleteById($id);
        header("Location: index.php?action=adminDashboard");  // Redirige vers le tableau de bord après la suppression
    }

    /**
     * Fonctions Edit (Article)
     */
    public function editArticle($id)
    {
        $article = $this->articleModel->lireUn($id);
        if ($article) {
            $this->adminView->renderEditArticleForm($article);
        } else {
            // Gérer l'erreur
            echo "Erreur : Le produit n'existe pas.";
        }
    }

    /**
     * Fonctions Update (Article)
     */
    public function updateArticle($id, $data)
    {
        $success = $this->articleModel->mettreAJour($id, $data);

        if ($success) {
            header("Location: index.php?action=dashboardArticle");
            exit();
        } else {
            echo "Erreur lors de la mise à jour du produit.";
        }
    }

    /**
     * Fonctions Delete (Article)
     */
    public function deleteArticle()
    {
        $id = $_POST['id'];
        $this->articleModel->id = $id;
        $this->articleModel->supprimer();
        header("Location: index.php?action=adminDashboardArticle");  // Redirige vers le tableau de bord après la suppression
    }

    /**
     * Fonctions Edit (Client)
     */
    public function editClient($id)
    {
        $client = $this->ClientModel->lireUn($id);
        if ($client) {
            $this->adminView->renderEditClientForm($client);
        } else {
            // Gérer l'erreur
            echo "Erreur : Le client n'existe pas.";
        }
    }

    /**
     * Fonctions Update (Client)
     */
    public function updateClient($id, $data)
    {
        $success = $this->clientModel->mettreAJour($id, $data);

        if ($success) {
            header("Location: index.php?action=dashboardClient");
            exit();
        } else {
            echo "Erreur lors de la mise à jour du client.";
        }
    }

    /**
     * Fonctions Delete (Client)
     */
    public function deleteClient()
    {
        $id = $_POST['id'];
        $this->clientModel->id = $id;
        $this->clientModel->supprimer();
        header("Location: index.php?action=adminDashboardClient");  // Redirige vers le tableau de bord après la suppression
    }


    /**
     * Dashboard Factures (Factures)
     */
    public function dashboardFactures()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->showDashboardFactures();
    }

    private function showDashboardFactures()
    {
        try {
            $factures = $this->facturesModel->lire();
            $this->adminView->adminDashboardFactures($factures);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    /**
     * Fonctions Edit, update, delete (Factures)
     */
    public function editFactures($id)
    {
        $facture = $this->facturesModel->lireUn($id);
        if ($facture) {
            $this->adminView->renderEditFacturesForm($facture);
        } else {
            echo "Erreur : La facture n'existe pas.";
        }
    }

    public function updateFactures($id, $data)
    {
        $success = $this->facturesModel->mettreAJour($id, $data);

        if ($success) {
            header("Location: index.php?action=dashboardFactures");
            exit();
        } else {
            echo "Erreur lors de la mise à jour de la facture.";
        }
    }

    public function deleteFactures()
    {
        $id = $_POST['id'];
        $this->facturesModel->supprimer($id);
        header("Location: index.php?action=dashboardFactures");
    }

    /**
     * Dashboard Historique (Historique)
     */
    public function dashboardHistorique()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->showDashboardHistorique();
    }

    private function showDashboardHistorique()
    {
        try {
            $historiques = $this->historiqueAchatsModel->lire();
            $this->adminView->adminDashboardHistorique($historiques);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    /**
     * Fonctions Edit, update, delete (Historique)
     */
    public function editHistorique($id)
    {
        $historique = $this->historiqueAchatsModel->lireUn($id);
        if ($historique) {
            $this->adminView->renderEditHistoriqueForm($historique);
        } else {
            echo "Erreur : L'historique médical n'existe pas.";
        }
    }

    public function updateHistorique($id, $data)
    {
        $success = $this->historiqueAchatsModel->mettreAJour($id, $data);

        if ($success) {
            header("Location: index.php?action=dashboardHistorique");
            exit();
        } else {
            echo "Erreur lors de la mise à jour de l'historique médical.";
        }
    }

    public function deleteHistorique()
    {
        $id = $_POST['id'];
        $this->historiqueAchatsModel->supprimer($id);
        header("Location: index.php?action=dashboardHistorique");
    }


    /**
     * Dashboard ArticleBoutique (ArticleBoutique)
     */
    public function dashboardArticleBoutique()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->showDashboardArticleBoutique();
    }

    private function showDashboardArticleBoutique()
    {
        try {
            $articleBoutique = $this->articleBoutiqueModel->lire();
            $this->adminView->adminDashboardArticleBoutique($articleBoutique);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    /**
     * Fonctions Edit, update, delete (ArticleBoutique)
     */
    public function editArticleBoutique($article_id, $boutique_id)
    {
        $articleBoutique = $this->articleBoutiqueModel->lireUn($article_id, $boutique_id);
        if ($articleBoutique) {
            $this->adminView->renderEditArticleBoutiqueForm($articleBoutique);
        } else {
            echo "Erreur : L'association article-boutique n'existe pas.";
        }
    }

    public function updateArticleBoutique($article_id, $boutique_id, $data)
    {
        $success = $this->articleBoutiqueModel->mettreAJour($article_id, $boutique_id, $data);

        if ($success) {
            header("Location: index.php?action=dashboardArticleBoutique");
            exit();
        } else {
            echo "Erreur lors de la mise à jour de l'association article-boutique.";
        }
    }

    public function deleteArticleBoutique()
    {
        $article_id = $_POST['article_id'];
        $boutique_id = $_POST['boutique_id'];
        $this->articleBoutiqueModel->supprimer($article_id, $boutique_id);
        header("Location: index.php?action=dashboardArticleBoutique");
    }
    /**
     * Dashboard Notes (Notes)
     */
    public function dashboardNotes()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->showDashboardNotes();
    }

    private function showDashboardNotes()
    {
        try {
            $notes = $this->notesModel->lire();
            $this->adminView->adminDashboardNotes($notes);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    /**
     * Fonctions Edit, update, delete (Notes)
     */
    public function editNotes($id)
    {
        $note = $this->notesModel->lireUn($id);
        if ($note) {
            $this->adminView->renderEditNotesForm($note);
        } else {
            echo "Erreur : La note n'existe pas.";
        }
    }

    public function updateNotes($id, $data)
    {
        $success = $this->notesModel->mettreAJour($id, $data);

        if ($success) {
            header("Location: index.php?action=dashboardNotes");
            exit();
        } else {
            echo "Erreur lors de la mise à jour de la note.";
        }
    }

    public function deleteNotes()
    {
        $id = $_POST['id'];
        $this->notesModel->supprimer($id);
        header("Location: index.php?action=dashboardNotes");
    }



    /**
     * Dashboard Achat (Achat)
     */
    public function dashboardAchats()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->showDashboardachat();
    }

    private function showDashboardAchat()
    {
        try {
            $achat = $this->achatModel->lire();
            $this->adminView->adminDashboardAchat($achat);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    /**
     * Fonctions Edit, update, delete (Achat)
     */
    public function editAchat($id)
    {
        $achat = $this->achatModel->lireUn($id);
        if ($achat) {
            $this->adminView->renderEditAchatForm($achat);
        } else {
            echo "Erreur : La commande n'existe pas.";
        }
    }

    public function updateAchat($id, $data)
    {
        $success = $this->achatModel->mettreAJour($id, $data);

        if ($success) {
            header("Location: index.php?action=dashboardAchat");
            exit();
        } else {
            echo "Erreur lors de la mise à jour de la commande.";
        }
    }

    public function deleteAchat()
    {
        $id = $_POST['id'];
        $this->achatModel->supprimer($id);
        header("Location: index.php?action=dashboardAchat");
    }

    /**
     * Dashboard Boutique (Boutique)
     */
    public function dashboardBoutiques()
    {
        if (!$this->isUserAdmin()) {
            $this->handleError('Accès refusé. Vous devez être connecté en tant qu\'administrateur.');
            return;
        }

        $this->showDashboardBoutique();
    }

    private function showDashboardBoutique()
    {
        try {
            $boutiques = $this->boutiqueModel->lire();
            $this->adminView->adminDashboardBoutiques($boutiques);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    /**
     * Fonctions Edit, update, delete (Boutique)
     */
    public function editBoutique($id)
    {
        $boutique = $this->boutiqueModel->lireUn($id);
        if ($boutique) {
            $this->adminView->renderEditBoutiqueForm($boutique);
        } else {
            echo "Erreur : La boutique n'existe pas.";
        }
    }

    public function updateBoutique($id, $data)
    {
        $success = $this->boutiqueModel->mettreAJour($id, $data);

        if ($success) {
            header("Location: index.php?action=dashboardBoutique");
            exit();
        } else {
            echo "Erreur lors de la mise à jour de la boutique.";
        }
    }

    public function deleteBoutique()
    {
        $id = $_POST['id'];
        $this->boutiqueModel->supprimer($id);
        header("Location: index.php?action=dashboardBoutique");
    }

    /**
     * Fonctions Edit (Marketing)
     */
    public function editMarketing($id)
    {
        $marketing = $this->marketingModel->lireUn($id);
        if ($marketing) {
            $this->adminView->renderEditMarketingForm($marketing);
        } else {
            // Gérer l'erreur
            echo "Erreur : Le responsable marketing n'existe pas.";
        }
    }

    /**
     * Fonctions Update (Marketing)
     */
    public function updateMarketing($id, $data)
    {

        if (!isset($data['utilisateur_id'])) {

            $marketing = $this->marketingModel->lireUn($id);
            $data['utilisateur_id'] = $marketing['utilisateur_id'];
        }


        $success = $this->marketingModel->mettreAJour($id, $data);
        if ($success) {
            echo "Responsable Marketing mis à jour avec succès!";
            header("Location: index.php?action=dashboardMarketing");
        } else {
            echo "Erreur lors de la mise à jour du responsable marketing.";
        }
    }


    /**
     * Fonctions Delete (Marketing)
     */
    public function deleteMarketing()
    {
        $id = $_POST['id'];
        $this->marketingModel->id = $id;
        $this->marketingModel->supprimer($id);
        header("Location: index.php?action=adminDashboardMarketing");  // Redirige vers le tableau de bord après la suppression
    }
}

---------------------------------
---  ArticleController.php :  ---
---------------------------------
<?php
require_once 'app/models/ArticleModel.php';
require_once 'app/models/HistoriqueAchatsModel.php';
require_once 'app/models/NotesModel.php';
require_once 'app/models/ClientModel.php';
require_once 'app/models/AchatModel.php';
require_once 'app/views/article_view.php';
require_once 'app/controllers/BaseController.php';




class ArticleController extends BaseController {
    private $articleModel;
    private $HistoriqueAchatsModel;
    private $notesModel;
    private $clientModel;
    private $achatModel;
    private $articleView;

    public function __construct() {
        $this->articleModel = new ArticleModel();
        $this->clientModel = new clientModel();
        $this->HistoriqueAchatsModel = new HistoriqueAchatsModel();
        $this->AchatModel = new AchatModel();
        $this->notesModel = new NotesModel();
        $this->articleView = new ArticleView();
    }

    public function homeArticle() {
        $articles = $this->articleModel->lire();
        $this->articleView->renderArticleList($articles);
    }

    public function listArticles() {
        $articles = $this->articleModel->lire();
        $this->articleView->displayArticles($articles);
    }

    public function viewArticle($id) {
        $article = $this->articleModel->lireUn($id);
        if ($article) {
            $this->articleView->displaySingleArticle($article);
        } else {
            echo "Article introuvable.";
        }
    }

  
// Méthodes pour gérer les historiques des achats
public function viewBuyHistory() {
  if (!isset($_SESSION['article_id'])) {
      echo "Erreur : ID de l'article non défini.";
      return;
  }

    $article_id = $_SESSION['article_id'];
    $histories = $this->HistoriqueAchatsModel->lire();
    $this->articleView->renderBuyHistories($histories);
}

public function addBuyHistory() {
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $data = [
        'article_id' => $_SESSION['article_id'],
        'client_id' => $_POST['client_id'],
        'date_visite' => $_POST['date_visite'],
        'diagnostic' => $_POST['diagnostic'],
        'traitement' => $_POST['traitement'],
        'commentaires' => $_POST['commentaires']
    ];

    if ($this->HistoriqueAchatsModel->creer($data)) {
        header("Location: index.php?action=viewBuyHistory");
    } else {
        echo "Erreur : Échec de la création de l'historique médical.";
    }
  } else {
      $this->articleView->renderCreateBuyHistoryForm($_SESSION['article_id']);
  }
}

public function renderCreateBuyHistoryForm() {
  $article_id = $_SESSION['article_id']; // Récupérer l'ID du médecin à partir de la session
  $this->articleView->renderCreateBuyHistoryForm($article_id);
}

// Méthodes pour gérer les patients
public function listPatients() {
    $patients = $this->patientModel->lire();
    $this->articleView->renderPatientList($patients);
}

public function CreatePatientForm() {
    $this->articleView->renderCreatePatientForm();
}

public function addPatient() {
    $data = [
        'nom' => $_POST['nom'],
        'prenom' => $_POST['prenom'],
        'date_de_naissance' => $_POST['date_de_naissance'],
        'email' => $_POST['email'],
        'telephone' => $_POST['telephone'],
        'adresse' => $_POST['adresse'],
        'historique_medical' => $_POST['historique_medical']
    ];

    if ($this->patientModel->creer($data)) {
        header("Location: index.php?action=listPatients");
    } else {
        echo "Erreur : Échec de la création du patient.";
    }
}


// Méthodes pour gérer les Achat

public function viewConfirmedAchats() {
    if (!isset($_SESSION['article_id'])) {
        echo "Erreur : ID de l article non défini.";
        return;
    }

    $article_id = $_SESSION['article_id'];
    $achats = $this->achatModel->lireConfirmesParArticle($article_id);
    $this->articleView->renderConfirmedAchats($achats);
}

}

?>

--------------------------------
---   UserController.php:    ---
--------------------------------

<?php
require_once 'app/models/UserModel.php';
require_once 'app/views/user_view.php';
require_once 'BaseController.php';
require_once 'app/views/article_view.php';
require_once 'app/views/contact_view.php';

class UserController extends BaseController
{
    private $userModel;
    private $userView;
    private $articleView;
    private $contactView;


    public function __construct()
    {
        $this->userModel = new UserModel();
        $this->userView = new UserView();
        $this->articleView = new ArticleView();
        $this->contactView = new ContactView();
    }

    public function isValidUserId($userId)
    {
        $user = $this->userModel->getUserById($userId);
        return $user !== null;
    }

    public function redirect($url)
    {
        header("Location: $url");
        exit;
    }

    public function showProfile($userId)
    {
        $user = $this->userModel->getUserById($userId);

        if ($user) {
            $this->userView->displayProfile($user);
        } else {
            $this->redirect("errorPage.php?message=Utilisateur non trouvé.");
        }
    }

    public function contact()
    {
        $this->contactView->renderContact();
    }

    public function home()
    {
        $this->userView->renderHome();
    }

    public function showLoginForm()
    {
        $this->userView->displayLoginForm();
    }

    public function showRegistrationForm()
    {
        $this->userView->displayRegistrationForm();
    }

    public function login($postData)
    {
        $email = $postData['email'] ?? null;
        $password = $postData['password'] ?? null;

        if (!$email || !$password) {
            $this->showLoginForm("Email ou mot de passe manquant");
            return;
        }

        $user = $this->userModel->authenticateUser($email, $password);

        if ($user) {
            $_SESSION['user_id'] = $user['id'];
            $_SESSION['role'] = $user['role'];

            if ($_SESSION['role'] === 'Admin') {
                $this->redirect("index.php?action=adminDashboard");
                return;
            }

            $this->redirect("index.php");
        } else {
            $this->showLoginForm("Email ou mot de passe incorrect");
        }
    }

    public function register($postData)
    {
        $username = $postData['nom'] ?? null;
        $password = $postData['password'] ?? null;
        $email = $postData['email'] ?? null;

        if (!$username || !$password || !$email) {
            $this->showRegistrationForm("Veuillez remplir tous les champs requis");
            return;
        }

        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
        $role = "Visiteur";
        $result = $this->userModel->registerUser($username, $hashedPassword, $email, $role);

        if ($result) {
            $this->redirect("index.php");
        } else {
            echo "Erreur lors de l'enregistrement.";
        }
    }

    public function logout()
    {
        // Démarre la session si elle n'est pas déjà démarrée
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }

        // Supprime toutes les variables de session
        $_SESSION = array();

        // Détruit complètement la session
        if (ini_get("session.use_cookies")) {
            $params = session_get_cookie_params();
            setcookie(session_name(), '', time() - 42000, $params["path"], $params["domain"], $params["secure"], $params["httponly"]);
        }
        session_destroy();

        // Redirige l'utilisateur vers la page d'accueil
        $this->redirect("index.php");
    }
}



--- Marketing_Controller.php :
<?php
require_once 'app/models/MarketingModel.php';
require_once 'app/models/AchatModel.php';
require_once 'app/views/marketing_view.php';
require_once 'app/controllers/BaseController.php';


class MarketingController extends BaseController
{
    private $marketingModel;
    private $marketingView;
    private $patientModel;
    private $medecinModel;
    private $achatModel;
    private $horairesTravailModel;

    public function __construct()
    {
        $this->marketingModel = new marketingModel();
        $this->marketingView = new MarketingView();
        $this->clientModel = new ClientModel();
        $this->achatModel = new AchatModel();
    }

    public function homeMarketing() {
        $marketings = $this->marketingModel->lire();
        $this->marketingView->renderMarketingList($marketings);
    }

    public function listMarketings() {
        $marketings = $this->marketingModel->lire();
        $this->marketingView->displayMarketings($marketings);
    }

    public function viewMarketing($id) {
        $marketing = $this->marketingModel->lireUn($id);
        if ($marketing) {
            $this->marketingView->displaySingleMarketing($marketing);
        } else {
            echo "Marketing introuvable.";
        }
    }

    public function createMarketing($utilisateur_id, $nom, $prenom, $telephone) {
        $this->marketingModel->utilisateur_id = $utilisateur_id;
        $this->marketingModel->nom = $nom;
        $this->marketingModel->prenom = $prenom;
        $this->marketingModel->telephone = $telephone;

        $success = $this->marketingModel->creer();
        if ($success) {
            echo "Marketing créé avec succès!";
        } else {
            echo "Erreur lors de la création du Marketing.";
        }
    }


    // Afficher tous les secrétaires
    public function listerMarketings()
    {
        $marketings = $this->marketingModel->obtenirTousLesMarketings();
        $this->marketingView->afficherMarketings($marketings);
    }

    // Afficher le formulaire de création de secrétaire
    public function montrerFormulaireCreation()
    {
        $this->marketingView->renderCreateAchatForm();
    }

    // Créer un nouveau secrétaire
    public function creerMarketing($donnees)
    {
        $resultat = $this->marketingModel->creerMarketing($donnees['utilisateur_id'], $donnees['nom'], $donnees['prenom'], $donnees['telephone']);
        if ($resultat) {
            $this->redirect('index.php?action=listerMarketings');
        } else {
            echo "Erreur lors de la création du secrétaire.";
        }
    }

    // Afficher le formulaire de modification de secrétaire
    public function montrerFormulaireModification($id)
    {
        $marketing = $this->marketingModel->obtenirMarketingParId($id);
        $this->marketingView->afficherFormulaireMarketing($marketing);
    }

    // Mettre à jour les informations d'un secrétaire
    public function mettreAJourMarketing($id, $donnees)
    {
        $resultat = $this->marketingModel->mettreAJourMarketing($id, $donnees['nom'], $donnees['prenom'], $donnees['telephone']);
        if ($resultat) {
            $this->redirect('index.php?action=listerMarketings');
        } else {
            echo "Erreur lors de la mise à jour du secrétaire.";
        }
    }

    // Supprimer un secrétaire
    public function supprimerMarketing($id)
    {
        $resultat = $this->marketingModel->supprimerMarketing($id);
        if ($resultat) {
            $this->redirect('index.php?action=listerMarketings');
        } else {
            echo "Erreur lors de la suppression du secrétaire.";
        }
    }

    // Méthodes pour gérer les patients
    public function listePatients()
    {
        $patients = $this->patientModel->lire();
        $this->marketingView->renderPatientList($patients);
    }

    public function CreePatientForm()
    {
        $this->marketingView->renderCreePatientForm();
    }

    public function ajoutPatient()
    {
        $data = [
            'nom' => $_POST['nom'],
            'prenom' => $_POST['prenom'],
            'date_de_naissance' => $_POST['date_de_naissance'],
            'email' => $_POST['email'],
            'telephone' => $_POST['telephone'],
            'adresse' => $_POST['adresse'],
            'historique_medical' => $_POST['historique_medical']
        ];

        if ($this->patientModel->creer($data)) {
            header("Location: index.php?action=listePatients");
        } else {
            echo "Erreur : Échec de la création du patient.";
        }
    }

    public function showPatientDetails($patientId)
    {
        // Récupérer les détails du patient avec l'ID $patientId depuis la base de données
        $patientDetails = $this->patientModel->lireUn($patientId);

        // Vérifier si les détails du patient ont été récupérés avec succès
        if ($patientDetails) {
            $this->marketingView->renderPatientDetails($patientDetails);
        } else {
            echo "Aucun patient trouvé avec cet identifiant.";
        }
    }


    /**
     * Fonctions Edit (Patient)
     */
    public function editPatient($id)
    {
        $patient = $this->patientModel->lireUn($id);
        if ($patient) {
            $this->marketingView->renderEditPatientForm($patient);
        } else {
            // Gérer l'erreur
            echo "Erreur : Le patient n'existe pas.";
        }
    }

    /**
     * Fonctions Update (Patient)
     */
    public function updatePatient($id, $data)
    {
        $success = $this->marketingModel->editPatient($id, $data);

        if ($success) {
            header("Location: index.php?action=listePatients");
            exit();
        } else {
            echo "Erreur lors de la mise à jour du patient.";
        }
    }

    // Méthode pour afficher le formulaire de création de rendez-vous   
    public function creerAchat($data)
    {
        $query = "INSERT INTO achat (article_id, client_id, date_heure, remarques) VALUES (?, ?, ?, ?)";
        $stmt = $this->conn->prepare($query);
        $stmt->bind_param("iiss", $data['article_id'], $data['client_id'], $data['date_heure'], $data['remarques']);
        return $stmt->execute();
    }

    public function montrerFormulaireAchat()
    {
        $clients = $this->marketingModel->lireClients();
        $articles = $this->marketingModel->lireArticles();
        $this->marketingView->renderCreateAchatForm($articles, $clients);
    }

    public function ajouterRendezVous()
    {
        $data = [
            'article_id' => $_POST['article'],
            'client_id' => $_POST['client'],
            'date_heure' => $_POST['Achat'],
            'raison' => $_POST['raison'],
            'statut' => 'confirme',
            'commentaires' => $_POST['remarques']
        ];

        if ($this->marketingModel->creerAchat($data)) {
            header("Location: index.php?action=listerAchat");
            exit;
        } else {
            echo "Erreur lors de la création de la commande.";
        }
    }

    public function viewAllAchat()
    {
        try {
            $achat = $this->achatModel->lire();
            $this->marketingView->MarketingAchat($achat);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    public function viewConfirmedAchat()
    {
        try {
            $achat = $this->marketingModel->getConfirmedAchat();
            $this->marketingView->marketingAchat($achat);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    public function viewPendingAchat()
    {
        try {
            $achat = $this->marketingModel->getPendingAchat();
            $this->marketingView->marketingAchat($achat);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    public function viewCancelledAchat()
    {
        try {
            $achat = $this->marketingModel->getCancelledAchat();
            $this->marketingView->marketingAchat($achat);
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    public function changerStatutAchat($id, $statut)
    {
        $this->marketingModel->changerStatut($id, $statut);
        $this->redirect('index.php?action=viewAllAchat');
    }
   
}
?>